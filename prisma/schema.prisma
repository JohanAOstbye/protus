// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Activities

enum activityType {
    Challenge
    Exercise
    Example
}

model Activity {
    id            String          @id @default(uuid()) @map("_id")
    apiId         String          @unique
    updatedAt     DateTime?       @updatedAt
    stored        DateTime?       @default(now())
    name          String
    url           String          @unique
    kcs           String[]
    Chapter       Chapter         @relation(fields: [chapterId], references: [id])
    chapterId     String
    type          activityType
    ActivityState ActivityState[]
}

model Chapter {
    id           String         @id @default(uuid()) @map("_id")
    updatedAt    DateTime?      @updatedAt
    stored       DateTime?      @default(now())
    name         String
    activities   Activity[]
    Course       Course         @relation(fields: [courseName], references: [name])
    courseName   String
    ChapterState ChapterState[]

    @@unique([name, courseName])
}

model Course {
    id          String        @id @default(uuid()) @map("_id")
    updatedAt   DateTime?     @updatedAt
    stored      DateTime?     @default(now())
    name        String        @unique
    chapters    Chapter[]
    CourseState CourseState[]
}

// State

type normalState {
    k Int
    p Int
}

model UserState {
    mongoID     String        @id @default(uuid()) @map("_id")
    user        User          @relation(fields: [userId], references: [id])
    userId      String        @unique
    courseState CourseState[]
    updatedAt   DateTime?     @updatedAt
}

model CourseState {
    id               String         @id @default(uuid()) @map("_id")
    course           Course         @relation(fields: [courseName], references: [name])
    userState        UserState?     @relation(fields: [userStateMongoID], references: [mongoID], onDelete: Cascade)
    userStateMongoID String?
    chapterState     ChapterState[]
    courseName       String
    Class            Class?         @relation(fields: [classId], references: [id])
    classId          String?        @unique
}

model ChapterState {
    id             String          @id @default(uuid()) @map("_id")
    chapter        Chapter         @relation(fields: [chapterId], references: [id])
    courseState    CourseState     @relation(fields: [courseStateId], references: [id], onDelete: Cascade)
    courseStateId  String
    activityStates ActivityState[]
    chapterId      String
    examples       normalState
    challenges     normalState
    exercises      normalState
    state          normalState?
}

model ActivityState {
    id             String       @id @default(uuid()) @map("_id")
    activity       Activity     @relation(fields: [activityId], references: [id])
    chapterState   ChapterState @relation(fields: [chapterStateId], references: [id], onDelete: Cascade)
    chapterStateId String
    activityId     String
    state          normalState
}

// X-API

model Document {
    registration String    @id @default(uuid()) @map("_id")
    stateId      String?   @unique
    profileId    String?   @unique
    timestamp    DateTime? @updatedAt
    contents     String
    agent        Actor?    @relation(fields: [agentId], references: [id])
    activityId   String?
    activity     Object?   @relation(fields: [activityId], references: [id])
    agentId      String?
}

model Statement {
    id          String       @id @default(uuid()) @map("_id")
    actor       Actor        @relation(fields: [actorId], references: [id])
    verb        Verb         @relation(fields: [verbId], references: [id])
    object      Object       @relation(fields: [objectId], references: [mongoid], name: "statementObject")
    result      Result?
    context     Context?     @relation(fields: [contextId], references: [registration], name: "statementContext")
    timestamp   DateTime?    @updatedAt
    stored      DateTime?    @default(now())
    authority   Actor        @relation(fields: [authorityId], references: [id], name: "authority")
    version     String?      @default("1.0.0")
    attachments Attachment[]
    actorId     String
    authorityId String
    verbId      String
    objectId    String       @unique
    contextId   String       @unique
    contextref  Context[]    @relation(name: "statementcontextref")
    objectref   Object[]     @relation(name: "statementobjectref")
}

type Score {
    scaled Int
    raw    Int?
    min    Int?
    max    Int?
}

type Result {
    score      Score?
    success    Boolean?
    completion Boolean?
    response   String?
    duration   String?
    extensions Extension[]
}

model ContextActivity {
    id                  String                  @id @default(uuid()) @map("_id")
    key                 String
    value               ContextActivityObject[]
    context             Context                 @relation(fields: [contextRegistration], references: [registration])
    contextRegistration String
}

model ContextActivityObject {
    id                String           @id @default(uuid()) @map("_id")
    contextActivity   ContextActivity? @relation(fields: [contextActivityId], references: [id])
    contextActivityId String?
    object            Object?          @relation(fields: [objectId], references: [mongoid])
    objectId          String?
}

model Context {
    registration      String            @id @default(uuid()) @map("_id")
    instructor        Actor?            @relation(fields: [instructorId], references: [id], name: "instructor")
    statement         Statement?        @relation(fields: [statementId], references: [id], onUpdate: NoAction, onDelete: NoAction, name: "statementcontextref")
    team              Actor?            @relation(fields: [teamId], references: [id], name: "team")
    contextActivities ContextActivity[]
    revision          String?
    platform          String?
    language          String?
    extensions        Extension[]
    instructorId      String?
    teamId            String?
    statementId       String
    Statement         Statement?        @relation(name: "statementContext")
}

type Attachment {
    usageType   String
    display     LanguageTag[]
    description LanguageTag[]
    contentType String
    length      Int
    sha2        String
    fileUrl     String
}

enum objectType {
    Activity
    Agent
    Group
    StatementRef
    SubStatement
}

enum interactionType {
    trueFalse
    choice
    fillIn
    longFillIn
    matching
    performance
    sequencing
    likert
    numeric
    other
}

type idDescription {
    id          String
    description LanguageTag[]
}

type definition {
    name                    LanguageTag[]
    description             LanguageTag[]
    type                    String?
    moreInfo                String?
    extensions              Extension[]
    interactionType         interactionType?
    correctResponsesPattern String[]
    choices                 String[]
    scale                   String[]
    source                  idDescription[]
    target                  idDescription[]
    steps                   idDescription[]
}

model Object {
    mongoid               String                  @id @default(uuid()) @map("_id")
    statement             Statement?              @relation(fields: [statementId], references: [id], onUpdate: NoAction, onDelete: NoAction, name: "statementobjectref")
    objectType            objectType
    actor                 Actor?                  @relation(fields: [actorId], references: [id], name: "substatementActor")
    objectActor           Actor?                  @relation(fields: [objectActorId], references: [id], name: "objectActor")
    verb                  Verb?                   @relation(fields: [verbId], references: [id], name: "substatementVerb")
    object                Object?                 @relation(fields: [objectId], references: [mongoid], onUpdate: NoAction, onDelete: NoAction, name: "substatementObject")
    id                    String?                 @unique
    definition            definition?
    actorId               String?
    objectActorId         String?
    statementId           String?
    verbId                String?
    objectId              String?
    ContextActivityObject ContextActivityObject[]
    Statement             Statement?              @relation(name: "statementObject")
    Objects               Object[]                @relation(name: "substatementObject")
    documents             Document[]
}

model Verb {
    id        String        @id @default(uuid()) @map("_id")
    iri       String        @unique @map("id")
    display   LanguageTag[]
    Statement Statement[]
    Object    Object[]      @relation(name: "substatementVerb")
}

type LanguageTag {
    key   String
    value String
}

type Extension {
    key   String
    value String
}

model XapiAccount {
    id       String  @id @default(uuid()) @map("_id")
    name     String
    homePage String
    Actor    Actor[]

    @@unique([name, homePage])
}

enum actorObjectType {
    Agent
    Group
}

model Actor {
    id                String           @id @default(uuid()) @map("_id")
    name              String?
    objectType        actorObjectType? @default(Agent)
    member            Actor[]          @relation(name: "member", references: [id], fields: [memberIDs])
    mbox              String?          @unique
    mbox_sha1sum      String?          @unique
    openid            String?          @unique
    account           XapiAccount?     @relation(fields: [accountId], references: [id])
    profile           User?            @relation(fields: [profileId], references: [id])
    memberIDs         String[]
    profileId         String?          @unique
    accountId         String?          @unique
    Statement         Statement[]
    teamContext       Context[]        @relation(name: "team")
    InsturctorContext Context[]        @relation(name: "instructor")
    subObjects        Object[]         @relation(name: "substatementActor")
    Objects           Object[]         @relation(name: "objectActor")
    Authorities       Statement[]      @relation(name: "authority")
    groups            Actor[]          @relation(name: "member", references: [id], fields: [groupIDs])
    groupIDs          String[]
    documents         Document[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid()) @map("_id")
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    STUDENT
    INSTRUCTOR
}

model User {
    id            String       @id @default(uuid()) @map("_id")
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    actor         Actor?
    password      String?
    roles         UserRole[]   @default([STUDENT])
    userDetails   UserDetails?
    code          String?      @unique
    state         UserState?
    teaching      Class[]      @relation(name: "teacher")
    Class         Class?       @relation(fields: [classId], references: [id], name: "student")
    classId       String?
}

model Class {
    id        String        @id @default(uuid()) @map("_id")
    teacher   User          @relation(name: "teacher", fields: [teacherId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    teacherId String
    students  User[]        @relation(name: "student")
    state     CourseState[]
}

model UserDetails {
    id                String   @id @default(uuid()) @map("_id")
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String   @unique
    ntnuStudent       String
    studyProgram      String
    experience        Int
    mainDevice        String
    additionalDevices String[]
    interest          Int
}

model VerificationToken {
    id         String   @id @default(uuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
